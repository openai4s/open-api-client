openapi: 3.0.0
info:
  title: OpenAI API
  description: APIs for sampling from and fine-tuning language models
  version: '1.2.0'
servers:
  - url: https://api.openai.com/v1
tags:
  - name: OpenAI
    description: The OpenAI REST API
paths:
  /engines:
    get:
      operationId: listEngines
      deprecated: true
      tags:
        - OpenAI
      summary: Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEnginesResponse'
      x-oaiMeta:
        name: List engines
        group: engines
        path: list
        examples:
          curl: |
            curl https://api.openai.com/v1/engines \
              -H 'Authorization: Bearer YOUR_API_KEY'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Engine.list()
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.listEngines();
        response: |
          {
            "data": [
              {
                "id": "engine-id-0",
                "object": "engine",
                "owner": "organization-owner",
                "ready": true
              },
              {
                "id": "engine-id-2",
                "object": "engine",
                "owner": "organization-owner",
                "ready": true
              },
              {
                "id": "engine-id-3",
                "object": "engine",
                "owner": "openai",
                "ready": false
              },
            ],
            "object": "list"
          }

  /engines/{engine_id}:
    get:
      operationId: retrieveEngine
      deprecated: true
      tags:
        - OpenAI
      summary: Retrieves a model instance, providing basic information about it such as the owner and availability.
      parameters:
        - in: path
          name: engine_id
          required: true
          schema:
            type: string
            # ideally this will be an actual ID, so this will always work from browser
            example:
              davinci
          description: &engine_id_description >
            The ID of the engine to use for this request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Engine'
      x-oaiMeta:
        name: Retrieve engine
        group: engines
        path: retrieve
        examples:
          curl: |
            curl https://api.openai.com/v1/engines/VAR_model_id \
              -H 'Authorization: Bearer YOUR_API_KEY'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Engine.retrieve("VAR_model_id")
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.retrieveEngine("VAR_model_id");
        response: |
          {
            "id": "VAR_model_id",
            "object": "engine",
            "owner": "openai",
            "ready": true
          }


  /engines/{engine_id}/search:
    post:
      operationId: createSearch
      deprecated: true
      tags:
        - OpenAI
      summary: |
        The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.

        To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.

        The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
      parameters:
        - in: path
          name: engine_id
          required: true
          schema:
            type: string
            example: davinci
          description: The ID of the engine to use for this request.  You can select one of `ada`, `babbage`, `curie`, or `davinci`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSearchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSearchResponse'
      x-oaiMeta:
        name: Create search
        group: searches
        path: create
        examples:
          curl: |
            curl https://api.openai.com/v1/engines/davinci/search \
              -H "Content-Type: application/json" \
              -H 'Authorization: Bearer YOUR_API_KEY' \
              -d '{
              "documents": ["White House", "hospital", "school"],
              "query": "the president"
            }'
          python: |
            import os
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            openai.Engine("davinci").search(
              documents=["White House", "hospital", "school"],
              query="the president"
            )
          node.js: |
            const { Configuration, OpenAIApi } = require("openai");
            const configuration = new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            });
            const openai = new OpenAIApi(configuration);
            const response = await openai.createSearch("davinci", {
              documents: ["White House", "hospital", "school"],
              query: "the president",
            });
        parameters: |
          {
            "documents": [
              "White House",
              "hospital",
              "school"
            ],
            "query": "the president"
          }
        response: |
          {
            "data": [
              {
                "document": 0,
                "object": "search_result",
                "score": 215.412
              },
              {
                "document": 1,
                "object": "search_result",
                "score": 40.316
              },
              {
                "document": 2,
                "object": "search_result",
                "score":  55.226
              }
            ],
            "object": "list"
          }



components:
  schemas:
    ListEnginesResponse:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Engine'
      required:
        - object
        - data


    CreateSearchRequest:
      type: object
      properties:
        query:
          description: Query to search against the documents.
          type: string
          example: "the president"
          minLength: 1
        documents:
          description: |
            Up to 200 documents to search over, provided as a list of strings.

            The maximum document length (in tokens) is 2034 minus the number of tokens in the query.

            You should specify either `documents` or a `file`, but not both.
          type: array
          minItems: 1
          maxItems: 200
          items:
            type: string
          nullable: true
          example: "['White House', 'hospital', 'school']"
        file:
          description: |
            The ID of an uploaded file that contains documents to search over.

            You should specify either `documents` or a `file`, but not both.
          type: string
          nullable: true
        max_rerank:
          description: |
            The maximum number of documents to be re-ranked and returned by search.

            This flag only takes effect when `file` is set.
          type: integer
          minimum: 1
          default: 200
          nullable: true
        return_metadata: &return_metadata_configuration
          description: |
            A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.

            This flag only takes effect when `file` is set.
          type: boolean
          default: false
          nullable: true
        user: &end_user_param_configuration
          type: string
          example: user-1234
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).

      required:
        - query

    CreateSearchResponse:
      type: object
      properties:
        object:
          type: string
        model:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              object:
                type: string
              document:
                type: integer
              score:
                type: number


    Engine:
      title: Engine
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
          nullable: true
        ready:
          type: boolean
      required:
        - id
        - object
        - created
        - ready

x-oaiMeta:
  groups:
    - id: models
      title: Models
      description: |
        List and describe the various models available in the API. You can refer to the [Models](/docs/models) documentation to understand what models are available and the differences between them.
    - id: completions
      title: Completions
      description: |
        Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
    - id: chat
      title: Chat
      description: |
        Given a chat conversation, the model will return a chat completion response.
    - id: edits
      title: Edits
      description: |
        Given a prompt and an instruction, the model will return an edited version of the prompt.
    - id: images
      title: Images
      description: |
        Given a prompt and/or an input image, the model will generate a new image.

        Related guide: [Image generation](/docs/guides/images)
    - id: embeddings
      title: Embeddings
      description: |
        Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.

        Related guide: [Embeddings](/docs/guides/embeddings)
    - id: audio
      title: Audio
      description: |
        Learn how to turn audio into text.

        Related guide: [Speech to text](/docs/guides/speech-to-text)
    - id: files
      title: Files
      description: |
        Files are used to upload documents that can be used with features like [Fine-tuning](/docs/api-reference/fine-tunes).
    - id: fine-tunes
      title: Fine-tunes
      description: |
        Manage fine-tuning jobs to tailor a model to your specific training data.

        Related guide: [Fine-tune models](/docs/guides/fine-tuning)
    - id: moderations
      title: Moderations
      description: |
        Given a input text, outputs if the model classifies it as violating OpenAI's content policy.

        Related guide: [Moderations](/docs/guides/moderation)
    - id: searches
      title: Searches
      warning:
        title: This endpoint is deprecated and will be removed on December 3rd, 2022
        message: We’ve developed new methods with better performance. [Learn more](https://help.openai.com/en/articles/6272952-search-transition-guide).
      description: |
        Given a query and a set of documents or labels, the model ranks each document based on its semantic similarity to the provided query.

        Related guide: [Search](/docs/guides/search)
    - id: classifications
      title: Classifications
      warning:
        title: This endpoint is deprecated and will be removed on December 3rd, 2022
        message: We’ve developed new methods with better performance. [Learn more](https://help.openai.com/en/articles/6272941-classifications-transition-guide).
      description: |
        Given a query and a set of labeled examples, the model will predict the most likely label for the query. Useful as a drop-in replacement for any ML classification or text-to-label task.

        Related guide: [Classification](/docs/guides/classifications)
    - id: answers
      title: Answers
      warning:
        title: This endpoint is deprecated and will be removed on December 3rd, 2022
        message: We’ve developed new methods with better performance. [Learn more](https://help.openai.com/en/articles/6233728-answers-transition-guide).
      description: |
        Given a question, a set of documents, and some examples, the API generates an answer to the question based on the information in the set of documents. This is useful for question-answering applications on sources of truth, like company documentation or a knowledge base.

        Related guide: [Question answering](/docs/guides/answers)
    - id: engines
      title: Engines
      description: These endpoints describe and provide access to the various engines available in the API.
      warning:
        title: The Engines endpoints are deprecated.
        message: Please use their replacement, [Models](/docs/api-reference/models), instead. [Learn more](https://help.openai.com/TODO).
